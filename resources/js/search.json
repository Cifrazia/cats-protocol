[[{"i":"#","p":["Home page"]},{"l":"Welcome","p":["CATS: Cifrazia Action Transport System"]},{"l":"Key features","p":["Single connection, multiple actions","Built-in data type encoders, compressors and cyphers","Configurable connections in runtime","Sequential request-response loop within single endpoint","Near-infinite data stream","Synchronous requests, concurrent responses","Server broadcast","Microservice gateway"]},{"l":"Language libraries","p":["There are only two languages officially supported by us.","Language","Version","Repo","Package Manager","Go","1.18+","cats-go","Python","3.10+","cats-python","PyPI"]},{"i":"need-more","l":"Need more?","p":["See next:","How it works","Reference"]}],[{"i":"#","p":["UML diagram of data flow"]},{"l":"Diagram"},{"l":"Overview of data flow"},{"l":"Input actions"}],[{"i":"#","p":["Protocol reference"]},{"l":"Common rules","p":["Variables and data types in this wiki displayed like VariableName dataType Data and types are displayed as in Go programming language","Protocol version: 3","Charset: UTF-8","Numeric order: Big-Endian","IP version: ipv4+ ipv6","Scheme: MsgPack","Time is measured in milliseconds, unless stated otherwise"]},{"l":"Terminology","p":["Action Head- required arguments that all actions convey, list of arguments is different for each action","Action- structured command, that client and server exchange","Addr- short for IP address","API- a set of Handlers","Cluster- a set of intertwined Service s, usually working behind gateway","Codec- two-way function that converts some data type to binary","Compressor- two-way function that reduces binary data size","Cypher- two-way function that encrypts (compressed)binary data","Endpoint- path to a Handler within API within Service within Cluster","Gateway- a single point of entry, that navigates Action s to their Endpoint s","Handler- a function that handles Message s","Handshake- a process of exchanging data between client and server to determine if connection is safe-ish","Input Message- a lesser message, that server and client exchange during Message handling","Message- a subclass of Action, commonly known as request/response in HTTP world","Middleware- decorator, function that handles Message s before and after Handlers","Service- a set of API s on a single server"]},{"l":"Terms"},{"l":"Error handling","p":["Any error occurred inside of Handler is converted to Error Message structure and used as a reply.","Any error occurred outside of Handler is treated as critical and connection get closed immediately.","Example of error:"]},{"l":"Concurrency","p":["CATS protocol can only send one action in one way at the same time.","It can send and read simultaneously for different actions.","Replies to requests are mapped using ActionID uint32.","ActionID must be unique for active actions.","Actions must be answered in N seconds, otherwise connection is treated broken.","Client can increase throughput of actions by spawning more connections.","Each server allows up to N simultaneous connections from same Addr."]},{"i":"multi-service-microservice","l":"Multi-service (microservice)","p":["Every handler in CATS protocol can be found by using EndpointID [96]byte: ServiceID [32]byte+ ApiID [32]byte+ HandlerID [32]byte ServiceID, ApiID and HandlerID, must be separately right-padded with \\x00 byte. Multiple service s can lay behind single point of entry Gateway, that would use service discovery to find and proxy action s.","By using EndpointID client can send request to gateway w/o need to open multiple connections to different servers."]},{"l":"API versioning","p":["CATS protocol supports global client's API versioning, that is used in every service behind gateway. Each separate endpoint can enable versioning by setting ranges of versions [min; max). Protocol does not support API versioning of specific service s or api s. It can be implemented in a higher level."]},{"l":"Chained Input actions","p":["Just like in real life, before giving an answer, we can ask clarifying questions. Input actions does exactly that. You can request client/server to input data while still working on handling message. It works exactly like input() function, but works over the wire and support all the same features message does."]},{"l":"Handshake","p":["Handshake is used to verify that client is somewhat safe to talk to. Handshake is an SHA-256 binary digest (32 bytes) and is calculated by concatenating following parts:","SecretKey []byte- secret key, that client and server agree on beforehand","Time []byte- decimal representation of current server time, converted to string","Phrase [32]byte- random phrase, that server used on accepting connection","Time is a current UNIX timestamp in seconds, which last digit is replaced with 0. Client must synchronize local time, using metadata from server."]},{"l":"Variables","p":["ActionType uint8- int identifier for types: Message, Input, CancelInput, Config, Ping, etc.","ActionID uint32- unique for current action queue, used to map requests and responses","First (left in BigEndian) bit represents action issuer: 0 for client and 1 for server","May be and increment counter or RNG, uniqueness is all that matters.","Head struct- binary formatted object, unique for every action type, length must be derived from ActionType","Compressors uint32- binary flags, representing supported CompressorID(1 | 2 | 4)","Cyphers uint32- binary flags, representing supported CypherID(1 | 2 | 4)","CompressorID uint32- binary flag, mapped to specific compressor ( 1 n)","CypherID uint32- binary flag, mapped to specific cypher ( 1 n)"]},{"l":"Codecs","p":["Data type IDs, names and descriptions of existing codecs"]},{"l":"Binary 0x00","p":["Raw binary data, no encoding applied"]},{"l":"Scheme 0x01","p":["Structural JSON-like data, packed with MsgPack"]},{"l":"Files 0x02","p":["List of files, concatenated together in singular byte stream. Files metadata is stored in header files, see headers"]},{"l":"Struct 0x03","p":["Structural data, packed as binary with built-in tools. It is faster to decode, takes less space, but requires both client and server agree on strict binary scheme."]},{"l":"Headers","p":["Headers are passed as length uint32+ headers [length]bytes encoded with MsgPack. Every header key must be transformed into kebab-case, under the hood. External headers API must allow any case. Headers shown below are used by protocol and should not be touched by client."]},{"l":"Files","p":["Files header contains metadata, when (input)message payload is encoded as files 0x02. It is a list or FileInfo structure, sorted in order in which files are concatenated inside message payload:"]},{"l":"Range","p":["Range header is a set of inclusive [start, end) exclusive tuples, that represents which parts of RAW (uncompressed, unencrypted) payload should be sent by server. Value of end must be >= start. Value of start or end may be null"]},{"i":"datalength-contentlength","l":"DataLength, ContentLength","p":["These headers may contain:","total size of raw data for data-length","total size of encoded,compressed,cyphered data for content-length","These headers may be missing, or containing null as value. Do not rely on them completely. It's sole purpose is to give a bit more information to a client."]},{"l":"Compressors","p":["Compressors are applied on each separate chunk, and compressed length of said chunk will be placed instead of original length during Payload transmission. The following list shows supported compression algorithms:"]},{"l":"Dummy 0x00","p":["No compression applied"]},{"l":"Zlib 0x01","p":["zLib compressor with Adler32 check-sum. For each compressed chunk, it will return 3 parts of payload and their combined length:","Length uint32- Combined length of the following chunk","Chunk [Length]byte- Compressed chunk","Data- compressed data","Adler32 int64- check sum to validate if data is not broken","Length uint32- size of uncompressed chunk to compare"]},{"l":"Cyphers","p":["Cyphers allow to encrypt data before sending it over wire. Currently, no cypher is supported."]},{"l":"Action heads","p":["Every action consists of ActionType uint8+ ActionID uint32+ Head struct+ Payload []byte. The following list describes which fields are placed as Head for each specific ActionType"]},{"l":"Message 0x00","p":["Total size: 96+4+8+1+4+4 = 117 bytes","EndpointID [96]byte- combined path: ServiceID [32]byte+ ApiID [32]byte+ HandlerId uint32","IdempotencyID uint32- unique temp random number that should be used to guarantee idempotency of an endpoint","SendTime int64- time when one side started sending message, used to calculate parts from total response time","CodecID uint8- data type ID: 0x00: binary 0x01: scheme 0x02: files","CompressorID uint32- compressor, used on data chunks.","CypherID uint32- cypher, used to encrypt data chunks."]},{"l":"Input Message 0x01","p":["Total size: 1+4+4 = 9 bytes","CodecID uint8- data type ID","CompressorID uint32- compressor, used on data chunks","CypherID uint32- cypher, used to encrypt data chunks."]},{"l":"Cancel Input 0x02","p":["Total size: 0 bytes","No action specific fields presented"]},{"l":"Ping 0xF0","p":["Total size: 8 bytes","Time int64- local time in ms"]},{"l":"Config 0xFF","p":["Total size: 8 bytes","TransferSpeed uint32- limit speed at which server sends data in bytes/s","ApiVersion uint32- change API version that client uses"]},{"l":"Communication"},{"l":"Initialization","p":["ApiVersion uint32- API version that client expects to use","Client connects to Server via TCP","Client decides whether ProtocolVersion and ServiceID matches expectations and abort connection if not.","Client sends greeting bytes, stating that it wants to use CATS: CATS\\x00\\x00\\xFF\\xFF([8]byte)","Client sends statement to Server:","ClientTime int64","Compressors uint32","Compressors uint32- compressors, supported by server","Cyphers uint32","Cyphers uint32- cyphers, supported by server","HandshakeAnswer [32]byte- SHA256 digest, calculated from current time, question phrase and local key","HandshakeQuestion [32]byte- open random phrase, that client should use alongside local key","IdleTimeout int64- amount of milliseconds connection can hang idle before force closed","If any error occurred, terminate connection","If Client exceeds limit of connections per Addr","If Client is banned by internal connection rate-limiter","If HandshakeAnswer is valid - send 0x00, otherwise send 0x01","If ProtocolVersion match - send 0x00, otherwise send ProtocolVersion","InputTimeout int64- amount of milliseconds server will wait for a response to Input action","ProtocolVersion uint8","ProtocolVersion uint8- Must be supplied by client even if client knows it matches","Server and Client can now exchange actions","Server closes connection","Server sends 32 empty bytes to Client","Server sends statement to Client:","Server validates client statement and handshake and return confirmation","ServerTime int64","ServiceID [32]byte"]},{"l":"Binary example","p":["00","00 00 00 00","00 00 00 00 00 01 D4 C0","00 00 00 07","00 00 00 0D","00 00 01 24 E0 53 35 80","03","43 41 54 53 00 00 FF FF","48 65 6C 6C 6F 20 57 6F 72 6C 64 20 4C 4F 4C 20 61 68 61 68 61 68 20 68 61 68 20 61 68 68 61 68","6D 69 6E 65 63 72 61 66 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00","73 6F 6D 65 72 61 6E 64 6F 6D 70 68 72 61 73 65 73 6F 6D 65 72 61 6E 64 6F 6D 70 68 72 61 73 65","ApiVersion: 13","Binary","CATS\\x00\\x00\\xFF\\xFF","ClientTime: 1257894000000","Compressors: 7(1 + 2 + 4)","Cyphers: 0","HandshakeAnswer","HandshakeAnswer: ok","HandshakePhrase: somerandomphrasesomerandomphrase","IdleTimeout: 120000","InputTimeout: 120000","ProtocolVersion: 3","ProtocolVersion: ok","ServerTime: 1257894000000","ServiceID: minecraft","Value"]},{"l":"Action exchange","p":["ActionID uint32","ActionType uint8","check and wait for all related inputs to be resolved","check requested inputs by any message in queue","Client sends action to Server:","Data can be split into chunks of bytes and sent in separate waves","handle message wrapped in middleware","Head struct","If Config{transferSpeed uint32, apiVersion uint32}:","If Input","if input is awaited, cancel it","if input is awaited, set result and remove from map","if input is not awaited, ignore","If InputCancel","If Message","If Ping{time: int64}","In this example action issuer will be client, however server can also send actions one its own","pass action to worker","Payload []byte- consists of N pairs of: length uint32+ chunk [length]byte","Payload must end with length = 0","prepare response","read client time in ms","reset conn timeout","send message to client","send Ping{time: int64} with server time in ms","send updated config Config{transferSpeed uint32, apiVersion uint32}","Server determines action type","Server sends response action to Client","update connection configuration:"]}],[{"l":"Examples"},{"l":"Endpoint definition"}]]